#!/usr/bin/env python
import roslib
roslib.load_manifest('facedetector')
import rospy
import sys, select, termios, tty
import cv
import time
import Image
import os
import cv2
from std_msgs.msg import String
from std_msgs.msg import Bool
import sensor_msgs.msg
from dynamic_reconfigure.server import Server as DynamicReconfigureServer
from facedetector.msg import Detection
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image

CV_WINDOW_TITLE = "Face detection"

# Node for face detection.
class FaceDetect():

	def detect_faces(self, image, draw=False):
		min_size = (20,20)
		haar_scale = 1.2
		min_neighbors = 2
		haar_flags = 0

		# Allocate the temporary images
		gray = cv.CreateImage((image.width, image.height), 8, 1)
		smallImage = cv.CreateImage((cv.Round(image.width / self.image_scale),
			cv.Round(image.height / self.image_scale)), 8 ,1)
		# Convert color input image to grayscale
		cv.CvtColor(image, gray, cv.CV_BGR2GRAY)
		# Scale input image for faster processing
		cv.Resize(gray, smallImage, cv.CV_INTER_LINEAR)
		# Equalize the histogram
		cv.EqualizeHist(smallImage, smallImage)

		# Detect the faces
		faces = cv.HaarDetectObjects(smallImage, self.faceCascade, cv.CreateMemStorage(0),
			haar_scale, min_neighbors, haar_flags, min_size)

		iplimage = cv.GetImage(image)

		detections = []

		if faces:
			for ((x, y, w, h), n) in faces:
				pt1 = (int(x * self.image_scale), int(y * self.image_scale))
				pt2 = (int((x + w) * self.image_scale), int((y + h) * self.image_scale))

				if draw:
					cv.Rectangle(image, pt1, pt2, cv.RGB(255, 0, 0), 3, 8, 0)

				face_image = cv.GetSubRect(gray, (pt1[0], pt1[1], pt2[0] - pt1[0], pt2[1] - pt1[1]))
	
				if self.detect_eyes:

					cv.SetImageROI(iplimage, (pt1[0], pt1[1], pt2[0] - pt1[0], int((pt2[1] - pt1[1]) * 0.5)))
					eyes = cv.HaarDetectObjects(image, eyeCascade, cv.CreateMemStorage(0),
						haar_scale, min_neighbors,haar_flags, (15, 15))	

					if eyes:
						if len(eyes) > 1:
							detections.append((x,y,w,h,cv.CloneMat(face_image)))

						if draw:
							for eye in eyes:
								# Draw a rectangle around the eye
								cv.Rectangle(image,
								(eye[0][0], eye[0][1]), (eye[0][0] + eye[0][2],
								eye[0][1] + eye[0][3]), cv.RGB(255, 0, 0), 1, 8, 0)		

				else:
					detections.append((x,y,w,h,cv.CloneMat(face_image)))

		cv.ResetImageROI(iplimage)

		return detections

	def toggle_callback(self, data):
		self.enabled = data.data
		if self.enabled:
			rospy.loginfo("Face detection enabled")
		else:
			rospy.loginfo("Face detection disabled")
	      
	def image_callback(self, data):
		if not self.enabled:
			return
		try:
			cv_image = self.bridge.imgmsg_to_cv(data, "bgr8")
			detections = self.detect_faces(cv_image, self.cv_window)

			if len(detections) > 0:
				message = Detection()
				message.header.seq = self.message_counter
				message.header.stamp = rospy.Time.now()
				message.header.frame_id = data.header.frame_id
				for detection in detections:
					message.x.append(detection[0])
					message.y.append(detection[1])
					message.width.append(detection[2])
					message.height.append(detection[3])
					message.image.append(self.bridge.cv_to_imgmsg(detection[4], "mono8"))

				self.message_counter += 1
				self.faces_pub.publish(message)
			
			if self.cv_window:
				cv.ShowImage(CV_WINDOW_TITLE, cv_image)
				cv.WaitKey(1)

		except CvBridgeError, e:
			print e
	      
	def __init__(self):
		# Get the ~private namespace parameters from command line or launch file
		# Set basic paramateres
		self.image_scale = rospy.get_param('~scale', 3)
		data_path = rospy.get_param('~data_path', 'data/')
		faces_topic = rospy.get_param('~detection_topic', rospy.resolve_name('%s/faces' % rospy.get_name()))
		toggle_topic = rospy.get_param('~toggle_topic', rospy.resolve_name('%s/toggle' % rospy.get_name()))
		image_topic = rospy.get_param('~image_topic', '/camera/image_raw')
		
		self.detect_eyes = rospy.get_param('~detect_eyes', False)

		self.faceCascade = cv.Load(os.path.join(data_path, "haarcascade_face.xml"))
		if self.detect_eyes:
			self.eyeCascade = cv.Load(os.path.join(data_path, "haarcascade_eye.xml"))

		# init camera capture stuff
		self.bridge = CvBridge()
		self.image_sub = rospy.Subscriber(image_topic, Image, self.image_callback, queue_size=1)

		# Subscribers and publishers
		self.faces_pub = rospy.Publisher(faces_topic, Detection)
		self.toggle_sub = rospy.Subscriber(toggle_topic, Bool, self.toggle_callback)

		# init and call detection
		self.enabled = rospy.get_param('~enabled', True)
		self.cv_window = rospy.get_param('~show_cv_window', False)
		self.message_counter = 0

# Main function.    
if __name__ == '__main__':

        # Initialize the node and name it.
        rospy.init_node('facedetector')
        try:
		fd = FaceDetect()
		rospy.spin()	
        except rospy.ROSInterruptException: pass
